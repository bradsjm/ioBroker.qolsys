{
  "version": 3,
  "sources": ["../../src/lib/countdown-timer.ts"],
  "sourcesContent": ["import { EventEmitter } from \"events\";\n\n/**\n * Countdown Timer\n */\nexport class CountdownTimer<T> extends EventEmitter {\n    private intervalId?: NodeJS.Timeout;\n\n    /**\n     * The constructor function for the CountdownTimer class.\n     *\n     * @return A new instance of the class\n     */\n    constructor() {\n        super();\n        this._countdownSeconds = this._remainingTime = 0;\n    }\n\n    private _countdownSeconds: number;\n\n    /**\n     * Returns the original number of seconds set for the countdown.\n     *\n     * @return {number} Number of seconds set for the countdown.\n     */\n    get countdownSeconds(): number {\n        return this._countdownSeconds;\n    }\n\n    private _payload?: T;\n\n    /**\n     * Returns the payload of the action.\n     *\n     * @return The payload of the action\n     */\n    get payload(): T | undefined {\n        return this._payload;\n    }\n\n    private _remainingTime: number;\n\n    /**\n     * Returns the remaining time in seconds.\n     *\n     * @return {number} The remaining time if running.\n     */\n    get remainingTime(): number {\n        return this._remainingTime;\n    }\n\n    /**\n     * The isRunning function returns a boolean value indicating whether the timer is currently running.\n     *\n     * @return A boolean value that is true if the timer is running and false otherwise\n     */\n    public get isRunning(): boolean {\n        return this.intervalId !== undefined;\n    }\n\n    /**\n     * Pause the countdown timer if it is running.\n     *\n     * @emits paused - Emits paused event if running\n     */\n    public pause(): void {\n        if (this.intervalId) {\n            clearInterval(this.intervalId);\n            this.intervalId = undefined;\n            this.emit(\"paused\", this._payload);\n        }\n    }\n\n    /**\n     * Resume the countdown timer if it is paused and there is remaining time.\n     *\n     * @emits resumed - Emits resumed event if paused\n     */\n    public resume(): void {\n        if (!this.intervalId && this._remainingTime > 0) {\n            this.intervalId = setInterval(this.countdown.bind(this), 1000);\n            this.emit(\"resumed\", this._payload);\n        }\n    }\n\n    /**\n     * Start a countdown timer from the specified number of seconds with optional payload.\n     *\n     * @param seconds {number} the number of seconds to count down\n     * @param payload the optional payload to send with each event\n     */\n    public start(seconds: number, payload?: T): void {\n        if (this.intervalId) {\n            clearInterval(this.intervalId);\n        }\n        this._remainingTime = this._countdownSeconds = seconds;\n        if (payload) {\n            this._payload = payload;\n        }\n        this._remainingTime = this._countdownSeconds;\n        this.intervalId = setInterval(this.countdown.bind(this), 1000);\n    }\n\n    /**\n     * Stop the countdown timer if it is running.\n     *\n     * @emits stopped - Emits stopped event if running\n     */\n    public stop(): void {\n        if (this.intervalId) {\n            clearInterval(this.intervalId);\n            this.intervalId = undefined;\n            this.emit(\"stopped\", this._payload);\n        }\n    }\n\n    /**\n     * The countdown function is called every second by the timer.\n     * It emits a countdown event with the remaining time and payload,\n     * and when it reaches 0, it emits a completed event with the payload.\n     *\n     * @emits countdown - Emits countdown event\n     * @emits completed - Emits completed event\n     */\n    private countdown(): void {\n        if (this._remainingTime >= 0) {\n            this.emit(\"countdown\", this._remainingTime, this._payload);\n            this._remainingTime--;\n        } else {\n            this.stop();\n            this.emit(\"completed\", this._payload);\n        }\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA6B;AAKtB,MAAM,uBAA0B,2BAAa;AAAA,EAQhD,cAAc;AACV,UAAM;AACN,SAAK,oBAAoB,KAAK,iBAAiB;AAAA,EACnD;AAAA,EASA,IAAI,mBAA2B;AAC3B,WAAO,KAAK;AAAA,EAChB;AAAA,EASA,IAAI,UAAyB;AACzB,WAAO,KAAK;AAAA,EAChB;AAAA,EASA,IAAI,gBAAwB;AACxB,WAAO,KAAK;AAAA,EAChB;AAAA,EAOA,IAAW,YAAqB;AAC5B,WAAO,KAAK,eAAe;AAAA,EAC/B;AAAA,EAOO,QAAc;AACjB,QAAI,KAAK,YAAY;AACjB,oBAAc,KAAK,UAAU;AAC7B,WAAK,aAAa;AAClB,WAAK,KAAK,UAAU,KAAK,QAAQ;AAAA,IACrC;AAAA,EACJ;AAAA,EAOO,SAAe;AAClB,QAAI,CAAC,KAAK,cAAc,KAAK,iBAAiB,GAAG;AAC7C,WAAK,aAAa,YAAY,KAAK,UAAU,KAAK,IAAI,GAAG,GAAI;AAC7D,WAAK,KAAK,WAAW,KAAK,QAAQ;AAAA,IACtC;AAAA,EACJ;AAAA,EAQO,MAAM,SAAiB,SAAmB;AAC7C,QAAI,KAAK,YAAY;AACjB,oBAAc,KAAK,UAAU;AAAA,IACjC;AACA,SAAK,iBAAiB,KAAK,oBAAoB;AAC/C,QAAI,SAAS;AACT,WAAK,WAAW;AAAA,IACpB;AACA,SAAK,iBAAiB,KAAK;AAC3B,SAAK,aAAa,YAAY,KAAK,UAAU,KAAK,IAAI,GAAG,GAAI;AAAA,EACjE;AAAA,EAOO,OAAa;AAChB,QAAI,KAAK,YAAY;AACjB,oBAAc,KAAK,UAAU;AAC7B,WAAK,aAAa;AAClB,WAAK,KAAK,WAAW,KAAK,QAAQ;AAAA,IACtC;AAAA,EACJ;AAAA,EAUQ,YAAkB;AACtB,QAAI,KAAK,kBAAkB,GAAG;AAC1B,WAAK,KAAK,aAAa,KAAK,gBAAgB,KAAK,QAAQ;AACzD,WAAK;AAAA,IACT,OAAO;AACH,WAAK,KAAK;AACV,WAAK,KAAK,aAAa,KAAK,QAAQ;AAAA,IACxC;AAAA,EACJ;AACJ;",
  "names": []
}
