{
  "version": 3,
  "sources": ["../../src/lib/countdown-timer.ts"],
  "sourcesContent": ["import { EventEmitter } from \"events\";\n\n/**\n * Countdown Timer\n */\nexport class CountdownTimer<T> extends EventEmitter {\n    private intervalId?: NodeJS.Timeout;\n\n    /**\n     * Constructor\n     */\n    constructor(countdownSeconds = 0) {\n        super({ captureRejections: true });\n        this._countdownSeconds = countdownSeconds;\n    }\n\n    private _countdownSeconds: number;\n\n    get countdownSeconds(): number {\n        return this._countdownSeconds;\n    }\n\n    private _payload?: T;\n\n    get payload(): T | undefined {\n        return this._payload;\n    }\n\n    private _remainingTime?: number;\n\n    get remainingTime(): number | undefined {\n        return this._remainingTime;\n    }\n\n    public get isRunning(): boolean {\n        return this.intervalId !== undefined;\n    }\n\n    /**\n     * Pause the countdown timer if it is running.\n     * @emits paused - Emits paused event if running\n     */\n    public pause(): void {\n        if (this.intervalId) {\n            clearInterval(this.intervalId);\n            this.intervalId = undefined;\n            this._remainingTime = this._countdownSeconds;\n            this.emit(\"paused\", this._payload);\n        }\n    }\n\n    /**\n     * Reset the countdown timer to its initial state.\n     */\n    public reset(): void {\n        this.stop();\n        this._countdownSeconds = 0;\n        this._payload = undefined;\n        this._remainingTime = undefined;\n    }\n\n    /**\n     * Resume the countdown timer if it is paused.\n     * @emits resumed - Emits resumed event if paused\n     */\n    public resume(): void {\n        if (!this.intervalId) {\n            this.intervalId = setInterval(this.countdown.bind(this), 1000);\n            this.emit(\"resumed\", this._payload);\n        }\n    }\n\n    /**\n     * Start a countdown timer.\n     * @param seconds the number of seconds to count down from\n     * @param payload the payload to send with each event\n     * @emits countdown - Emits countdown event with the number of seconds remaining (including 0)\n     * @emits stopped - Emits stopped event if manually stopped\n     */\n    public start(seconds: number, payload?: T): void {\n        if (this.intervalId) {\n            clearInterval(this.intervalId);\n        }\n        this._countdownSeconds = seconds;\n        if (payload) {\n            this._payload = payload;\n        }\n        this.intervalId = setInterval(this.countdown.bind(this), 1000);\n    }\n\n    /**\n     * Stop the countdown timer if it is running.\n     * @emits stopped - Emits stopped event if running\n     */\n    public stop(): void {\n        if (this.intervalId) {\n            clearInterval(this.intervalId);\n            this.intervalId = undefined;\n            this._countdownSeconds = 0;\n            this._remainingTime = undefined;\n            this.emit(\"stopped\", this._payload);\n        }\n    }\n\n    /**\n     * Private method for the countdown logic.\n     */\n    private countdown(): void {\n        if (this._countdownSeconds >= 0) {\n            this.emit(\"countdown\", this._countdownSeconds, this._payload);\n            this._countdownSeconds--;\n            this._remainingTime = this._countdownSeconds;\n        } else {\n            this.stop();\n            this.emit(\"completed\", this._payload);\n        }\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA6B;AAKtB,MAAM,uBAA0B,2BAAa;AAAA,EAMhD,YAAY,mBAAmB,GAAG;AAC9B,UAAM,EAAE,mBAAmB,KAAK,CAAC;AACjC,SAAK,oBAAoB;AAAA,EAC7B;AAAA,EAIA,IAAI,mBAA2B;AAC3B,WAAO,KAAK;AAAA,EAChB;AAAA,EAIA,IAAI,UAAyB;AACzB,WAAO,KAAK;AAAA,EAChB;AAAA,EAIA,IAAI,gBAAoC;AACpC,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,IAAW,YAAqB;AAC5B,WAAO,KAAK,eAAe;AAAA,EAC/B;AAAA,EAMO,QAAc;AACjB,QAAI,KAAK,YAAY;AACjB,oBAAc,KAAK,UAAU;AAC7B,WAAK,aAAa;AAClB,WAAK,iBAAiB,KAAK;AAC3B,WAAK,KAAK,UAAU,KAAK,QAAQ;AAAA,IACrC;AAAA,EACJ;AAAA,EAKO,QAAc;AACjB,SAAK,KAAK;AACV,SAAK,oBAAoB;AACzB,SAAK,WAAW;AAChB,SAAK,iBAAiB;AAAA,EAC1B;AAAA,EAMO,SAAe;AAClB,QAAI,CAAC,KAAK,YAAY;AAClB,WAAK,aAAa,YAAY,KAAK,UAAU,KAAK,IAAI,GAAG,GAAI;AAC7D,WAAK,KAAK,WAAW,KAAK,QAAQ;AAAA,IACtC;AAAA,EACJ;AAAA,EASO,MAAM,SAAiB,SAAmB;AAC7C,QAAI,KAAK,YAAY;AACjB,oBAAc,KAAK,UAAU;AAAA,IACjC;AACA,SAAK,oBAAoB;AACzB,QAAI,SAAS;AACT,WAAK,WAAW;AAAA,IACpB;AACA,SAAK,aAAa,YAAY,KAAK,UAAU,KAAK,IAAI,GAAG,GAAI;AAAA,EACjE;AAAA,EAMO,OAAa;AAChB,QAAI,KAAK,YAAY;AACjB,oBAAc,KAAK,UAAU;AAC7B,WAAK,aAAa;AAClB,WAAK,oBAAoB;AACzB,WAAK,iBAAiB;AACtB,WAAK,KAAK,WAAW,KAAK,QAAQ;AAAA,IACtC;AAAA,EACJ;AAAA,EAKQ,YAAkB;AACtB,QAAI,KAAK,qBAAqB,GAAG;AAC7B,WAAK,KAAK,aAAa,KAAK,mBAAmB,KAAK,QAAQ;AAC5D,WAAK;AACL,WAAK,iBAAiB,KAAK;AAAA,IAC/B,OAAO;AACH,WAAK,KAAK;AACV,WAAK,KAAK,aAAa,KAAK,QAAQ;AAAA,IACxC;AAAA,EACJ;AACJ;",
  "names": []
}
