{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["import * as utils from \"@iobroker/adapter-core\";\nimport { AlarmType, ArmingStateType } from \"./enums\";\n\nimport { AlarmJson, ArmingJson, ErrorJson, PartitionJson, ZoneJson } from \"./interfaces\";\nimport { QolsysEventParser } from \"./lib/qolsys-event-parser\";\nimport { QolsysPanelClient } from \"./lib/qolsys-panel-client\";\nimport { convertToTitleCase, getPath, getZoneRole } from \"./lib/utils\";\nimport { LanguagePack } from \"./lib/language-pack\";\n\n/**\n * Qolsys IQ Panel adapter.\n */\nclass QolsysPanel extends utils.Adapter {\n    private eventParser?: QolsysEventParser;\n    private panel?: QolsysPanelClient;\n\n    /**\n     * Qolsys adapter constructor.\n     *\n     * @param {Partial<utils.AdapterOptions>} options - Adapter options.\n     */\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: \"qolsys\",\n        });\n        this.on(\"ready\", this.onReady.bind(this));\n        this.on(\"stateChange\", this.onStateChange.bind(this));\n        this.on(\"unload\", this.onUnload.bind(this));\n    }\n\n    /**\n     * Create partition objects if they do not exist and subscribe to state changes.\n     *\n     * @param id - The ID of the partition object\n     * @param partition - The partition object\n     */\n    private async createPartitionObjects(id: string, partition: PartitionJson): Promise<void> {\n        await this.createChannelAsync(\"panel\", id, { name: partition.name });\n        await this.createStateAsync(\"panel\", id, \"command\", {\n            name: LanguagePack.PanelCommand,\n            desc: LanguagePack.PanelCommandDescription,\n            type: \"string\",\n            states: {\n                \"ARM_AWAY\": \"Arm Away\",\n                \"ARM_AWAY_INSTANT\": \"Arm Away (Instant)\",\n                \"ARM_STAY\": \"Arm Stay\",\n                \"DISARM\": \"Disarm\",\n                \"AUXILIARY\": \"Auxiliary Alarm\",\n                \"FIRE\": \"Fire Alarm\",\n                \"POLICE\": \"Police Alarm\",\n                \"NOP\": \"None\"\n            },\n            role: \"value\",\n            read: false,\n            write: true,\n            def: \"NOP\"\n        }, { partition_id: partition.partition_id });\n\n        await this.createStateAsync(\"panel\", id, \"alarmState\", {\n            name: LanguagePack.LastAlarmState,\n            desc: LanguagePack.LastAlarmStateDescription,\n            type: \"string\",\n            states: {\n                \"AUXILIARY\": \"Auxiliary\",\n                \"FIRE\": \"Fire\",\n                \"POLICE\": \"Police\",\n                \"NONE\": \"None\"\n            },\n            role: \"indicator.alarm\",\n            read: true,\n            write: false,\n            def: \"NONE\"\n        });\n\n        await this.createStateAsync(\"panel\", id, \"armDelay\", {\n            name: LanguagePack.ArmingDelay,\n            desc: LanguagePack.ArmingDelayDescription,\n            type: \"number\",\n            min: 0,\n            unit: \"sec\",\n            role: \"value.interval\",\n            read: true,\n            write: true,\n            def: 60\n        });\n\n        await this.createStateAsync(\"panel\", id, \"armState\", {\n            name: LanguagePack.ArmState,\n            desc: LanguagePack.ArmStateDescription,\n            type: \"string\",\n            states: {\n                \"ARM-AWAY-EXIT-DELAY\": \"Exit Delay (Away)\",\n                \"ARM-AWAY-ENTRY-DELAY\": \"Entry Delay (Away)\",\n                \"ENTRY_DELAY\": \"Entry Delay\",\n                \"EXIT_DELAY\": \"Exit Delay\",\n                \"DISARM\": \"Disarmed\",\n                \"ARM_STAY\": \"Armed Stay\",\n                \"ARM_AWAY\": \"Armed Away\"\n            },\n            role: \"state\",\n            read: true,\n            write: false,\n            def: \"DISARM\"\n        }, { partition_id: partition.partition_id });\n\n        await this.createStateAsync(\"panel\", id, \"secureArm\", {\n            name: LanguagePack.RequirePin,\n            desc: LanguagePack.RequirePinDescription,\n            type: \"boolean\",\n            role: \"state\",\n            states: {\n                \"true\": \"Enabled\",\n                \"false\": \"Disabled\"\n            },\n            read: true,\n            write: false,\n            def: false\n        });\n\n        // Subscribe to changes of panel partition command\n        await this.subscribeStatesAsync(getPath(\"panel\", id, \"command\"));\n    }\n\n    /**\n     * Create zone objects if they do not exist.\n     *\n     * @param zone - The {ZoneJson} of the partition object\n     * @param role - The object role\n     */\n    private async createZoneObjects(zone: ZoneJson, role: string): Promise<void> {\n        const zoneTypeTitle = `${convertToTitleCase(zone.type)} (${zone.group})`;\n        await this.setObjectAsync(`zones.${zone.id}`, {\n            type: \"state\",\n            common: {\n                name: zone.name,\n                desc: zoneTypeTitle,\n                type: \"boolean\",\n                states: {\n                    \"true\": \"Open\",\n                    \"false\": \"Closed\"\n                },\n                role: role,\n                read: true,\n                write: false,\n                def: false\n            },\n            native: {\n                group: zone.group,\n                partition_id: zone.partition_id,\n                zone_alarm_type: zone.zone_alarm_type,\n                zone_id: zone.zone_id,\n                zone_physical_type: zone.zone_physical_type\n            }\n        });\n    }\n\n    /**\n     * Retrieve arm state value or undefined if not set.\n     * @param partition_id the Partition ID\n     * @return the arm state value or undefined\n     */\n    private async getPartitionArmState(partition_id: number): Promise<string | undefined> {\n        const id = `partition${partition_id + 1}`;\n        const armStateId = getPath(\"panel\", id, \"armState\");\n        const armState = await this.getStateAsync(armStateId);\n        return typeof armState?.val === \"string\" ? armState?.val : undefined;\n    }\n\n    /**\n     * Retrieve arming delay value or undefined if not set.\n     * @param partition_id the Partition ID\n     * @return the arming delay value or undefined\n     */\n    private async getPartitionarmDelay(partition_id: number): Promise<number | undefined> {\n        const id = `partition${partition_id + 1}`;\n        const delayId = getPath(\"panel\", id, \"armDelay\");\n        const delayState = await this.getStateAsync(delayId);\n        return typeof delayState?.val === \"number\" ? delayState?.val : undefined;\n    }\n\n    /**\n     * Asynchronously invoked when panel alarm event is received.\n     *\n     * @param {AlarmJson} alarm - Alarm type\n     */\n    private async onAlarm(alarm: AlarmJson): Promise<void> {\n        const id = `partition${alarm.partition_id + 1}`;\n        this.log.info(`triggering ${alarm.alarm_type} alarm on ${id}`);\n        await this.setStateChangedAsync(getPath(\"panel\", id, \"alarmState\"), {\n            val: alarm.alarm_type ?? \"NONE\", ack: true\n        });\n    }\n\n    /**\n     * Asynchronously invoked when panel arming event is received.\n     *\n     * @param {ArmingJson} arming - Arming event\n     */\n    private async onArmingChange(arming: ArmingJson): Promise<void> {\n        const id = `partition${arming.partition_id + 1}`;\n        this.log.info(`arming state now ${arming.arming_type} on ${id} (delay: ${arming.delay ?? \"n/a\"})`);\n        await this.setStateChangedAsync(getPath(\"panel\", id, \"armState\"), {\n            val: arming.arming_type, ack: true\n        });\n        if (arming.delay != null) {\n            await this.setStateChangedAsync(getPath(\"panel\", id, \"armDelay\"), {\n                val: arming.delay, ack: true\n            });\n        }\n\n    }\n\n    /**\n     * Handles changes in to command state.\n     *\n     * @param {number} partition_id - The numerical ID of the partition.\n     * @param {any} value - The value of the command.\n     */\n    private async onCommand(partition_id: number, value: string): Promise<void> {\n        const panel = this.panel;\n        if (!panel) {\n            return;\n        }\n\n        const armState = await this.getPartitionArmState(partition_id);\n\n        // If the panel is already armed it must be disarmed first\n        if (value !== ArmingStateType.DISARM && armState !== ArmingStateType.DISARM) {\n            this.log.info(`disarming partition ${partition_id + 1} prior to arming`);\n            await panel.disarm(partition_id, this.config.userPinCode);\n        }\n\n        switch (value) {\n            case \"ARM_AWAY_INSTANT\":\n                this.log.info(`arming away partition ${partition_id + 1} with no delay`);\n                await panel.armAway(partition_id, 0);\n                break;\n\n            case ArmingStateType.ARM_AWAY:\n                const delay = await this.getPartitionarmDelay(partition_id);\n                this.log.info(`arming away partition ${partition_id + 1} with delay ${delay}`);\n                await panel.armAway(partition_id, delay);\n                break;\n\n            case ArmingStateType.ARM_STAY:\n                this.log.info(`arming stay partition ${partition_id + 1}`);\n                await panel.armStay(partition_id);\n                break;\n\n            case ArmingStateType.DISARM:\n                this.log.info(`disarming partition ${partition_id + 1}`);\n                await panel.disarm(partition_id);\n                break;\n\n            case AlarmType.FIRE:\n            case AlarmType.POLICE:\n            case AlarmType.AUX:\n                await panel.trigger(partition_id, value);\n                break;\n\n            default:\n                this.log.warn(`unknown command ${value} on partition ${partition_id + 1}`);\n                break;\n        }\n    }\n\n    /**\n     * Asynchronously invoked when the panel is connected\n     */\n    private async onPanelConnect(): Promise<void> {\n        await this.setOnlineStatus(true);\n        await this.panel?.requestSummary();\n    }\n\n    // When the connection is closed, set connection state to false\n    private async onPanelDisconnect(): Promise<void> {\n        await this.setOnlineStatus(false);\n    }\n\n    // Log and update connection errors\n    private async onPanelError(error: Error): Promise<void> {\n        this.log.error(error.message);\n        await this.setStateChangedAsync(\"panel.lastError\", { val: error.message, ack: true });\n    }\n\n    // Log and update partition errors\n    private async onPartitionError(error: ErrorJson): Promise<void> {\n        const errorType = convertToTitleCase(error.error_type.toLowerCase())\n        const value = (`${errorType}: ${error.description} (Partition ${error.partition_id + 1}) `);\n        this.log.error(value);\n        await this.setStateChangedAsync(\"panel.lastError\", { val: value, ack: true });\n    }\n\n    /**\n     * Asynchronously invoked when the adapter is ready to start and connect to panel.\n     */\n    private async onReady(): Promise<void> {\n        // Reset the connection indicator to false\n        await this.setOnlineStatus(false);\n\n        // Check if the settings are configured\n        if (!this.config.host || !this.config.port || !this.config.secureToken) {\n            this.log.error(\"please set host, port and secure token in the instance settings\");\n            return\n        }\n\n        // Create event parser\n        this.eventParser = new QolsysEventParser(this.log);\n        this.eventParser.on(\"arming\", this.onArmingChange.bind(this));\n        this.eventParser.on(\"alarm\", this.onAlarm.bind(this));\n        this.eventParser.on(\"error\", this.onPartitionError.bind(this));\n        this.eventParser.on(\"partition\", this.onReceivedPartition.bind(this));\n        this.eventParser.on(\"secureArm\", this.onSecureArmChange.bind(this));\n        this.eventParser.on(\"zone\", this.onReceivedZone.bind(this));\n\n        // Create client\n        this.panel = new QolsysPanelClient(this.log, this.config);\n        this.panel.on(\"close\", this.onPanelDisconnect.bind(this));\n        this.panel.on(\"connect\", this.onPanelConnect.bind(this));\n        this.panel.on(\"data\", this.eventParser.parseEventPayload.bind(this.eventParser));\n        this.panel.on(\"error\", this.onPanelError.bind(this));\n\n        // Start connection to the panel\n        this.panel.connect();\n    }\n\n    /**\n     * Creates a partition if it does not exist.\n     * Sets the initial status and secure arm state of the partition.\n     */\n    private async onReceivedPartition(partition: PartitionJson): Promise<void> {\n        this.log.debug(`received partition #${partition.partition_id} (${partition.name})`);\n        const id = `partition${partition.partition_id + 1}`;\n        await this.createPartitionObjects(id, partition);\n        await this.onArmingChange({ partition_id: partition.partition_id, arming_type: partition.status });\n        await this.onSecureArmChange(partition);\n    }\n\n    /**\n     * Parses and creates a zone within a partition. Sets the initial status of the zone.\n     * @param {ZoneJson} zone - An object containing information about the zone.\n     * @param {string} event - The event (info, active, update) that occurred.\n     */\n    private async onReceivedZone(zone: ZoneJson, event: string): Promise<void> {\n        const role = getZoneRole(zone);\n        if (!role) {\n            return\n        }\n\n        if (event === \"delete\") {\n            // Not currently implemented\n            this.log.info(`zone ${zone.id} delete not currently implemented`);\n            return\n        }\n\n        await this.createZoneObjects(zone, role);\n        const stateId = `zones.${zone.id}`;\n\n        this.log.debug(`setting zone #${zone.zone_id} (${zone.name}) to ${zone.status}`);\n        const isOpen = zone.status === \"Open\";\n\n        // Set the zone state\n        await this.setStateChangedAsync(stateId, { val: isOpen, ack: true });\n\n        // Update the partition secure state\n        await this.updatePartitionFaultState(zone.partition_id);\n    }\n\n    /**\n     * Updates secure arm state of a partition\n     * @param partition the partition\n     */\n    private async onSecureArmChange(partition: PartitionJson): Promise<void> {\n        const id = `partition${partition.partition_id + 1}`;\n        const secureArmId = getPath(\"panel\", id, \"secureArm\");\n        await this.setStateChangedAsync(secureArmId, { val: partition.secure_arm, ack: true });\n    }\n\n    /**\n     * Invoked when a subscribed state changes.\n     *\n     * @param {string} id - The ID of the state change.\n     * @param {ioBroker.State | null | undefined} state - The state that is changing.\n     */\n    private async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n        // Early return if the conditions are not met\n        if (!state || state.ack || !this.panel || !state.val) return;\n\n        // Get which partition id is associated with the received command object\n        const object = await this.getForeignObjectAsync(id);\n        const partition_id = object?.native.partition_id;\n\n        if (typeof partition_id === \"number\" && typeof state.val === \"string\") {\n            this.log.debug(`received command ${state.val} for partition ${partition_id}`);\n            await this.onCommand(partition_id, state.val);\n        }\n    }\n\n    /**\n     * Invoked when the adapter is unloaded.\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            this.eventParser?.removeAllListeners();\n            if (this.panel) {\n                this.panel.autoReconnect = false;\n                this.panel.removeAllListeners();\n                this.panel.disconnect();\n            }\n        } finally {\n            this.log.info(\"shutting down\");\n            callback();\n        }\n    }\n\n    /**\n     * Set the online status\n     *\n     * @param online - The new online status\n     */\n    private async setOnlineStatus(online: boolean): Promise<void> {\n        await this.setStateAsync(\"info.connection\", { val: online, ack: true });\n    }\n\n    /**\n     * Updates the tracked fault state of a partition\n     * @param partitionId - The partition ID to update\n     */\n    private async updatePartitionFaultState(partitionId: number): Promise<void> {\n        await this.createStateAsync(\"panel\", `partition${partitionId + 1}`, \"isFaulted\", {\n            name: {\n                \"en\": \"Is Faulted\",\n                \"de\": \"Ist fehlgeschlagen\",\n                \"ru\": \"\u041D\u0435\u0438\u0441\u043F\u0440\u0430\u0432\u0435\u043D\",\n                \"pt\": \"\u00C9 falhado\",\n                \"nl\": \"Is Faulted\",\n                \"fr\": \"Est d\u00E9fectueux\",\n                \"it\": \"E' inadeguato\",\n                \"es\": \"Es culpado\",\n                \"pl\": \"Is Faulted\",\n                \"uk\": \"\u0404 \u0417\u0430 \u0437\u0430\u043C\u043E\u0432\u0447\u0443\u0432\u0430\u043D\u043D\u044F\u043C\",\n                \"zh-cn\": \"I.Fault\"\n            },\n            desc: {\n                \"en\": \"Indicates if any partition zones are Open\",\n                \"de\": \"Gibt an, ob Partitionszonen offen sind\",\n                \"ru\": \"\u0423\u043A\u0430\u0437\u044B\u0432\u0430\u0435\u0442, \u0435\u0441\u043B\u0438 \u043A\u0430\u043A\u0438\u0435-\u043B\u0438\u0431\u043E \u0437\u043E\u043D\u044B \u0440\u0430\u0437\u0434\u0435\u043B\u043E\u0432 \u043E\u0442\u043A\u0440\u044B\u0442\u044B\",\n                \"pt\": \"Indica se quaisquer zonas de parti\u00E7\u00E3o s\u00E3o abertas\",\n                \"nl\": \"Indicatie als er partitiezones open zijn\",\n                \"fr\": \"Indique si toutes les zones de partition sont ouvertes\",\n                \"it\": \"Indica se le zone di partizione sono aperte\",\n                \"es\": \"Indica si hay zonas de partici\u00F3n abiertas\",\n                \"pl\": \"Je\u015Bli ka\u017Cda strefa podzia\u0142u jest otwarta\",\n                \"uk\": \"\u0406\u043D\u0434\u0438\u043A\u0430\u0442\u043E\u0440\u0438, \u044F\u043A\u0449\u043E \u0432\u0456\u0434\u043A\u0440\u0438\u0442\u0456 \u0431\u0443\u0434\u044C-\u044F\u043A\u0456 \u0440\u043E\u0437\u0434\u0456\u043B\u0438\",\n                \"zh-cn\": \"\u8BF4\u660E\u4EFB\u4F55\u5730\u533A\u5747\u53EF\u8FDB\u5165\"\n            },\n            type: \"boolean\",\n            role: \"state\",\n            states: {\n                \"true\": \"Faulted\",\n                \"false\": \"Secure\"\n            },\n            read: true,\n            write: false\n        });\n        if (this.eventParser) {\n            const isFaulted = this.eventParser.isFaulted(partitionId);\n            if (isFaulted != undefined) {\n                const id = `panel.partition${partitionId + 1}.isFaulted`;\n                await this.setStateChangedAsync(id, { val: isFaulted, ack: true });\n            }\n        }\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new QolsysPanel(options);\n} else {\n    // Otherwise start the instance directly\n    (() => new QolsysPanel())();\n}\n"],
  "mappings": "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",
  "names": []
}
